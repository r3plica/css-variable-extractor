name: Deploy to Vercel

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  USER_EMAIL: ${{ secrets.USER_EMAIL }}
  USER_NAME: ${{ secrets.USER_NAME }}
  JFROG_API_TOKEN: ${{ secrets.JFROG_API_TOKEN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Step 3: Configure Git
      - name: Configure Git User
        run: |
          git config --global user.email $USER_EMAIL
          git config --global user.name $USER_NAME

      # Step 4: Configure npm for JFrog Artifactory
      - name: Configure npm for JFrog
        run: echo "//useast.jfrog.lexisnexisrisk.com/artifactory/api/npm/riskn-npm-release-virtual/:_authToken=$JFROG_API_TOKEN" >> ~/.npmrc

      # Step 5: Install dependencies
      - name: Install Dependencies
        run: npm ci

      # Step 6: Run Linting
      - name: Run ESLint Checks
        run: npm run lint

      # Step 7: Run Unit Tests
      - name: Run Tests
        run: npm run test

      # Step 8: Build the project
      - name: Build Project for Deployment
        run: |
          npx vercel pull --yes --environment=production --token=$VERCEL_TOKEN
          npx vercel build --prod --token=$VERCEL_TOKEN

      # Step 9: Move build files to root (if required by your project structure)
      - name: Move Build Files
        run: |
          mv dist/css-variable-extractor/browser/* dist/css-variable-extractor/
          rm -r dist/css-variable-extractor/browser

      # Step 10: Deploy to Vercel
      - name: Deploy to Vercel
        id: deploy
        run: |
          npx vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
